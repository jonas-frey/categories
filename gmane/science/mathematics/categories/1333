Path: news.gmane.org!not-for-mail
From: Barry Jay <cbj@socs.uts.edu.au>
Newsgroups: gmane.science.mathematics.categories
Subject: functorial lambda calculus
Date: Mon, 10 Jan 2000 14:57:41 +1100 (EST)
Lines: 30
Approved: news@gmane.org
Message-ID: <200001100357.OAA15318__26931.9218270995$1241017757$gmane$org@algae.socs.uts.EDU.AU>
NNTP-Posting-Host: main.gmane.org
X-Trace: ger.gmane.org 1241017756 30767 80.91.229.2 (29 Apr 2009 15:09:16 GMT)
X-Complaints-To: usenet@ger.gmane.org
NNTP-Posting-Date: Wed, 29 Apr 2009 15:09:16 +0000 (UTC)
To: categories@mta.ca
Original-X-From: rrosebru@mta.ca Mon Jan 10 11:10:54 2000 -0400
Original-Received: (from Majordom@localhost)
	by mailserv.mta.ca (8.9.3/8.9.3) id JAA16757
	for categories-list; Mon, 10 Jan 2000 09:40:29 -0400 (AST)
X-Authentication-Warning: mailserv.mta.ca: Majordom set sender to cat-dist@mta.ca using -f
Original-Sender: cat-dist@mta.ca
Precedence: bulk
Status: O
Content-Length: 1069
Original-Lines: 29
Xref: news.gmane.org gmane.science.mathematics.categories:1333
Archived-At: <http://permalink.gmane.org/gmane.science.mathematics.categories/1333>


The following report is available from:
 
<http://www/socs.uts.edu.au/~cbj/Publications/fl_report.ps.gz>

Comments most welcome. 
Barry Jay

-------------------------------------------------------------------

	Functorial Lambda-calculus
		 C. Barry Jay


Functorial lambda-calculus represents some type constructors as
functors, whose quantification supports new forms of polymorphism.
This is exploited by a powerful new generic programming technique,
called program extension, whose evaluation does not use explicit
types. It can be used to define all the standard second-order
combinators, for mapping, folding, etc. so that they apply to
arbitrary data types. It can also be used to define generic functions
for equality, addition, assignment and shape. In particular, shape
evaluation can be used to support static specialisation, and to reduce
space usage.

This paper introduces the calculus, provides a type inference
algorithm, and shows how to augment its expressive power and improve
its efficiency by adding more constructions and optimising evaluation.


