Path: news.gmane.org!not-for-mail
From: Jacques Carette <carette@mcmaster.ca>
Newsgroups: gmane.science.mathematics.categories
Subject: Programming Languages and Mechanized Mathematics Workshop
Date: Mon, 12 Mar 2007 17:14:43 -0400
Lines: 131
Approved: news@gmane.org
Message-ID: <E1HRFu7-0004ag-0A@mailserv.mta.ca>
NNTP-Posting-Host: main.gmane.org
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: quoted-printable
X-Trace: ger.gmane.org 1241019468 9878 80.91.229.2 (29 Apr 2009 15:37:48 GMT)
X-Complaints-To: usenet@ger.gmane.org
NNTP-Posting-Date: Wed, 29 Apr 2009 15:37:48 +0000 (UTC)
To: categories <categories@mta.ca>
Original-X-From: rrosebru@mta.ca Tue Mar 13 20:05:47 2007 -0300
Return-path: <cat-dist@mta.ca>
Envelope-to: categories-list@mta.ca
Delivery-date: Tue, 13 Mar 2007 20:05:47 -0300
Original-Received: from Majordom by mailserv.mta.ca with local (Exim 4.61)
	(envelope-from <cat-dist@mta.ca>)
	id 1HRFu7-0004ag-0A
	for categories-list@mta.ca; Tue, 13 Mar 2007 19:55:39 -0300
Original-Sender: cat-dist@mta.ca
Precedence: bulk
X-Keywords: 
X-UID: 52
Status: O
Content-Length: 6474
Original-Lines: 130
Xref: news.gmane.org gmane.science.mathematics.categories:3698
Archived-At: <http://permalink.gmane.org/gmane.science.mathematics.categories/3698>

[This might be of interest to the members of this list, as many=20
approaches to both programming language semantics and of mechanizing=20
mathematics are deeply categorical].


  Programming Languages for Mechanized Mathematics Workshop

As part of Calculemus 2007=20
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>

Hagenberg, Austria

[http://www.cas.mcmaster.ca/plmms07/]

The intent of this workshop is to examine more closely the intersection=20
between programming languages and mechanized mathematics systems (MMS).=20
By MMS, we understand computer algebra systems (CAS), [automated]=20
theorem provers (TP/ATP), all heading towards the development of fully=20
unified systems (the MMS), sometimes also called universal mathematical=20
assistant systems (MAS) (see Calculemus 2007=20
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/>).

There are various ways in which these two subjects of /programming=20
languages/ and /systems for mathematics/ meet:

    * Many systems for mathematics contain a dedicated programming
      language. For instance, most computer algebra systems contain a
      dedicated language (and are frequently built in that same
      language); some proof assistants (like the Ltac language for Coq)
      also have an embedded programming language. Note that in many
      instances this language captures only algorithmic content, and
      /declarative/ or /representational/ issues are avoided.
    * The /mathematical languages/ of many systems for mathematics are
      very close to a functional programming language. For instance the
      language of ACL2 is just Lisp, and the language of Coq is very
      close to Haskell. But even the mathematical language of the HOL
      system can be used as a functional programming language that is
      very close to ML and Haskell. On the other hand, these languages
      also contain very rich specification capabilities, which are
      rarely available in most computation-oriented programming
      languages. And even then, many specification languages ((B, Z,
      Maude, OBJ3, CASL, etc) can still teach MMSes a trick or two
      regarding representational power.
    * Conversely, functional programming languages have been getting
      "more mathematical" all the time. For instance, they seem to have
      discovered the value of dependent types rather recently. But they
      are still not quite ready to 'host' mathematics (the non-success
      of docon <http://www.haskell.org/docon/> being typical). There are
      some promising languages on the horizon (Epigram
      <http://www.e-pig.org/>, Omega
      <http://web.cecs.pdx.edu/%7Esheard/Omega/index.html>) as well as
      some hybrid systems (Agda <http://agda.sourceforge.net/>, Focal
      <http://focal.inria.fr/site/index.php>), although it is unclear if
      they are truly capable of expressing the full range of ideas
      present in mathematics.
    * Systems for mathematics are used to prove programs correct. (One
      method is to generate "correctness conditions" from a program that
      has been annotated in the style of Hoare logic and then prove
      those conditions in a proof assistant.) An interesting question is
      what improvements are needed for this both on the side of the
      mathematical systems and on the side of the programming languages.

We are interested in all these issues. We hope that a certain synergy=20
will develop between those issues by having them explored in parallel.

These issues have a very colourful history. Many programming language=20
innovations first appeared in either CASes or Proof Assistants, before=20
migrating towards more mainstream languages. One can cite (in no=20
particular order) type inference, dependent types, generics,=20
term-rewriting, first-class types, first-class expressions, first-class=20
modules, code extraction, and so on. However, a number of these=20
innovations were never aggressively pursued by system builders, letting=20
them instead be developped (slowly) by programming language researchers.=20
Some, like type inference and generics have flourished. Others, like=20
first-class types and first-class expressions, are not seemingly being=20
researched by anyone.

We want to critically examine what has worked, and what has not. Why are=20
all the current ``popular'' computer algebra systems untyped? Why are=20
the (strongly typed) proof assistants so much harder to use than a=20
typical CAS? But also look at question like what forms of polymorphism=20
exists in mathematics? What forms of dependent types exist in=20
mathematics? How can MMS regain the upper hand on issues of=20
'genericity'? What are the biggest barriers to using a more mainstream=20
language as a host language for a CAS or an ATP?

This workshop will accept two kinds of submissions: full research papers=20
as well as position papers. Research papers should be nore more than 15=20
pages in length, and positions papers no more than 3 pages. Submission=20
will be through _EasyChair_. An informal version of the proceedings will=20
be available at the workshop, with a more formal version to appear=20
later. We are looking into having the best papers completed into full=20
papers and published as a special issue of a Journal (details to follow).


    Important Dates

April 25, 2007: Submission Deadline
June 29-30, 2007: Workshop


    Program Committee

Lennart Augustsson <http://www.cs.chalmers.se/%7Eaugustss> [Credit Suisse=
]
Wieb Bosma <http://www.math.ru.nl/%7Ebosma/>[Radboud University=20
Nijmegen, Netherlands]
Jacques Carette <http://www.cas.mcmaster.ca/%7Ecarette> (co-Chair)=20
[McMaster University, Canada]
David Delahaye <http://cedric.cnam.fr/%7Edelahaye/> [CNAM, France]
Jean-Christophe Filli=E2tre <http://www.lri.fr/%7Efilliatr/> [CNRS and=20
Universit=E9 de Paris-Sud, France]
John Harrison <http://www.cl.cam.ac.uk/%7Ejrh13/> [Intel Corporation, USA=
]
Markus (Makarius) Wenzel <http://www4.in.tum.de/%7Ewenzelm/> [Technische=20
Universit=E4t M=FCnchen, Germany]
Freek Wiedijk <http://www.cs.ru.nl/%7Efreek/> (co-Chair) [Radboud=20
University Nijmegen, Netherlands]
Wolfgang Windsteiger <http://www.risc.uni-linz.ac.at/people/wwindste/>=20
[University of Linz, Austria]


    Location and Registration

Location and registration information can be found on the Calculemus=20
<http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/> web=20
site.




