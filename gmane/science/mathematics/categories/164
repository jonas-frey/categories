Path: news.gmane.org!not-for-mail
From: Tom Hirschowitz <tom.hirschowitz@univ-savoie.fr>
Newsgroups: gmane.science.mathematics.categories
Subject: Re: Functions in programming
Date: Mon, 16 Mar 2009 10:27:15 +0100
Lines: 93
Approved: news@gmane.org
Message-ID: <E1LjMUZ-0001UK-99@mailserv.mta.ca>
Reply-To: Tom Hirschowitz <tom.hirschowitz@univ-savoie.fr>
NNTP-Posting-Host: lo.gmane.org
Content-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes
Content-Transfer-Encoding: 7bit
X-Trace: ger.gmane.org 1237249368 12437 80.91.229.12 (17 Mar 2009 00:22:48 GMT)
X-Complaints-To: usenet@ger.gmane.org
NNTP-Posting-Date: Tue, 17 Mar 2009 00:22:48 +0000 (UTC)
To: Categories Mailing List <categories@mta.ca>
Original-X-From: categories@mta.ca Tue Mar 17 01:24:04 2009
Return-path: <categories@mta.ca>
Envelope-to: gsmc-categories@m.gmane.org
Original-Received: from mailserv.mta.ca ([138.73.1.1])
	by lo.gmane.org with esmtp (Exim 4.50)
	id 1LjN6B-0007X5-0H
	for gsmc-categories@m.gmane.org; Tue, 17 Mar 2009 01:24:03 +0100
Original-Received: from Majordom by mailserv.mta.ca with local (Exim 4.61)
	(envelope-from <categories@mta.ca>)
	id 1LjMUZ-0001UK-99
	for categories-list@mta.ca; Mon, 16 Mar 2009 20:45:11 -0300
Original-Sender: categories@mta.ca
Precedence: bulk
Xref: news.gmane.org gmane.science.mathematics.categories:164
Archived-At: <http://permalink.gmane.org/gmane.science.mathematics.categories/164>


Dear all,

Before asking what the morphisms 0 -> A are, one should probably fix a
category.
This involves choosing a programming language and a notion of
equivalence for programs, and both choices impact on the existence of
an initial object.



1) A first possibility consists of choosing a programming language and
considering the category where:

  - objects are types (possibly a single one for untyped languages
such as Scheme),

  - morphisms A -> B are programs of type B with one variable of type
A (or variants such as the one proposed by Mike Schulman), considered
equivalent up to observational equivalence.

Observational equivalence might mean a lot of different things. Let us
here put

   M ~ N : A -> B

when for all P : B -> Bool and Q : 1 -> A, PMQ evaluates to true iff
PNQ evaluates to true.

(If your programming language allows infinite loops, you may replace
Bool with 1 and observe termination.)

Then, if your programming language has an empty type A, i.e., one
without any program 1 -> A, it is initial because M ~ N vacuously holds.
An example such programming language is Agda (using an inductive type
with no constructor).



2) However, in Haskell, you may define an inhabitant of all types by
typing the recursive definition

    bot = bot .

You may also define functions:

f x = True

and

g x = False

having all types A -> Bool, which are not equivalent because

f bot evaluates to True

while

g bot evaluates to False.



3) But there are other possible notions of equivalence! For example,
one may consider only beta, eta, ... equivalence. Then, even with an
empty type A, the functions

f x = True

and

g x = False

are different, hence A is not initial.



4) As a final remark, even in a consistent setting like Agda,
functions from the empty type are frequently applied (in an open
context), typically the canonical function (A * not A) -> B, which
looks like

f (x, y) = !(y(x)),

where !M = match M with {} -- case analysis on zero constructors.



  Pierre Hyvernat and Tom Hirschowitz

-- 



