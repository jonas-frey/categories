Path: news.gmane.org!not-for-mail
From: ramshaw@pa.dec.com
Newsgroups: gmane.science.mathematics.categories
Subject: an early exercise in Mac Lane
Date: Thu, 08 Jul 1999 13:50:51 -0700
Lines: 78
Approved: news@gmane.org
Message-ID: <199907082050.AA20109@mercury.pa.dec.com>
NNTP-Posting-Host: main.gmane.org
X-Trace: ger.gmane.org 1241017602 29734 80.91.229.2 (29 Apr 2009 15:06:42 GMT)
X-Complaints-To: usenet@ger.gmane.org
NNTP-Posting-Date: Wed, 29 Apr 2009 15:06:42 +0000 (UTC)
To: categories@mta.ca
Original-X-From: cat-dist Thu Jul  8 19:06:15 1999
Original-Received: (from Majordom@localhost)
	by mailserv.mta.ca (8.9.3/8.9.3) id SAA07117
	for categories-list; Thu, 8 Jul 1999 18:00:49 -0300 (ADT)
X-Authentication-Warning: mailserv.mta.ca: Majordom set sender to cat-dist@mta.ca using -f
X-Mts: smtp
Original-Sender: cat-dist@mta.ca
Precedence: bulk
Status: O
Content-Length: 3274
Original-Lines: 77
Xref: news.gmane.org gmane.science.mathematics.categories:1155
Archived-At: <http://permalink.gmane.org/gmane.science.mathematics.categories/1155>

I am puzzled by an exercise on page 15 of Mac Lane's classic text
"Categories for the Working Mathematician": exercise 5 for section 3
of Chapter I:

  5. Find two different functors T: Grp --> Grp with object function
  T(G) = G the identity for every group G.

One such functor, of course, is the identity on every arrow as well.
So the challenge is to find a functor that leaves all objects
unchanged, but changes around at least some arrows.

There is one easy way to do that, which may well be what Mac Lane had
in mind as the solution to this exercise.  For each group G, we choose
some automorphism of G, say a_G.  We then define our functor T to take
the arrow f: G --> H to the arrow

         (a_H)^(-1) f a_G : G --> H.

This preserves identities and compositions, so it does define a
functor.  But it seems like cheating, in a way.  For one thing, this
new functor is structurally the same as the identity functor.  All
that we've done is to change the scheme by which we name the elements
of the various groups, using the automorphism a_G as our rule for
renaming the elements of G.

Note also that we haven't used any properties of the particular
category Grp.  This renaming technique would work equally well for Ab
or Set.  If renaming was what Mac Lane had in mind, why did he specify
Grp in the exercise?

I've spent some time trying to construct a more interesting solution
to the exercise: a functor from Grp to Grp that leaves objects alone
and transforms arrows in some way that clearly changes the structure.
In particular, I started out hoping to take some non-null arrows to
null arrows.  For example, consider the homomorphism

         h : C_2 --> A_5

from the cyclic group C_2 to the alternating group A_5 that takes the
lone non-identity element of C_2 to the permutation (12)(34).  That
permutation is even, and hence belongs to A_5; and it has order two,
so the map h is a homomorphism.

Initially, I thought that it would be pretty safe for my functor to
map h to the null homomorphism.  Note that A_5 is a simple group, so
any homomorphism from A_5 to any other group has to be either
injective or null -- there are no intermediate possibilities.

But then I thought about situations like the following:

           C_2  --->  C_2 x G

            |            |
            | h          | (h, id)
            V            V

           A_5  <---  A_5 x G

The map on the top line takes t |--> (t, e) where e is the identity of
G, while the map on the bottom line is the projection (s, u) |--> s.

This diagram commutes before I apply my functor, and my functor
presumably leaves the top and bottom arrows alone.  If my functor
takes the h on the left to the null homomorphism, it must also take
the h component of the map (h, id) on the right to null; but it can't
alter the id component of that map.  So my functor has to take some
arrows only partway to the null arrow.  Given an arbitrary arrow, how
far towards the null arrow should my functor take it?  Finding a rule
that works seems hard, even for direct products, not to mention
semi-direct products and non-split extensions.

Is there some interesting solution to this exercise that I am missing?
Or did Mac Lane have the boring, renaming solution in mind?

Thanks,
Lyle Ramshaw


